repositories {
    maven {
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        //Local repo for custom forge builds.
        //Is not required to exist
        name = "LocalForge"
        url = "../../MinecraftForge/repo/"
    }
    mavenCentral()
    mavenLocal()
}


dependencies {
    minecraft([
            group: "net.minecraftforge",
            name: "forge",
            version: "${project.minecraft_version}-${project.forge_version}"
    ])

}

minecraft {
    mappings channel: "${project.mcp_channel}".toString(), version: "${project.mcp_mappings}".toString()
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            taskName 'runClient1'
            main 'net.minecraftforge.userdev.LaunchTesting'
            property 'forge.logging.console.level', 'info'
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            workingDirectory project.file('run/client1').canonicalPath
            jvmArg '-ea:de.maxanier...'
            
            mods {
                guideapivp {
                    source sourceSets.main

                }
            }

        }
        server = {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            workingDirectory project.file('run/server').canonicalPath
            jvmArg '-ea:de.maxanier...'

            mods {
                guideapivp {
                    source sourceSets.main

                }


            }
        }
    }

}




processResources {

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': project.mod_version, 'mcversion': minecraft_version, 'forge_version': forge_version
    }



    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
    outputs.upToDateWhen { false }

    exclude '**/Thumbs.db'
}





jar {

    //Keep the jar as clean as possible
    includeEmptyDirs = false

    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir




    manifest {
        attributes([
                "FMLAT": "accesstransformer.cfg",
                "Specification-Title": "guideapi-vp",
                "Specification-Vendor": "maxanier",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${mod_version}",
                "Implementation-Vendor" :"maxanier",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    exclude 'de/maxanier/guideapi/test/**/*'


}
